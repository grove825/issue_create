name: CI

on:
  push: ~
  pull_request: ~


permissions:
  contents: read
  issues: write

env:
  CACHE_VERSION: 11
  UV_CACHE_VERSION: 1
  MYPY_CACHE_VERSION: 9
  DEFAULT_PYTHON: "3.12"
  ALL_PYTHON_VERSIONS: "['3.12', '3.13']"
  PRE_COMMIT_CACHE: ~/.cache/pre-commit
  UV_CACHE_DIR: /tmp/uv-cache

jobs:
    pre-commit:
      name: Prepare pre-commit base
      runs-on: ubuntu-24.04
      if: |
        github.event.inputs.pylint-only != 'true'
        && github.event.inputs.mypy-only != 'true'
        && github.event.inputs.audit-licenses-only != 'true'
      steps:
        - name: Check out code from GitHub
          uses: actions/checkout@v4.2.2
        - name: Set up Python ${{ env.DEFAULT_PYTHON }}
          id: python
          uses: actions/setup-python@v5.3.0
          with:
            python-version: ${{ env.DEFAULT_PYTHON }}
            check-latest: true
        - name: Restore base Python virtual environment
          id: cache-venv
          uses: actions/cache@v4.2.0
          with:
            path: venv
            key: >-
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{
                needs.info.outputs.pre-commit_cache_key }}
        - name: Create Python virtual environment
          if: steps.cache-venv.outputs.cache-hit != 'true'
          run: |
            python -m venv venv
            . venv/bin/activate
            python --version
            pip install uv
            uv pip install -r requirements-dev.txt
        - name: Restore pre-commit environment from cache
          id: cache-precommit
          uses: actions/cache@v4.2.0
          with:
            path: ${{ env.PRE_COMMIT_CACHE }}
            lookup-only: true
            key: >-
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
                needs.info.outputs.pre-commit_cache_key }}
        - name: Install pre-commit dependencies
          if: steps.cache-precommit.outputs.cache-hit != 'true'
          run: |
            . venv/bin/activate
            pre-commit install-hooks
    lint-ruff-format:
      name: Check ruff-format
      runs-on: ubuntu-24.04
      needs:
        - pre-commit
      steps:
        - name: Check out code from GitHub
          uses: actions/checkout@v4.2.2
        - name: Set up Python ${{ env.DEFAULT_PYTHON }}
          uses: actions/setup-python@v5.3.0
          id: python
          with:
            python-version: ${{ env.DEFAULT_PYTHON }}
            check-latest: true
        - name: Restore base Python virtual environment
          id: cache-venv
          uses: actions/cache/restore@v4.2.0
          with:
            path: venv
            fail-on-cache-miss: true
            key: >-
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{
                needs.info.outputs.pre-commit_cache_key }}
        - name: Restore pre-commit environment from cache
          id: cache-precommit
          uses: actions/cache/restore@v4.2.0
          with:
            path: ${{ env.PRE_COMMIT_CACHE }}
            fail-on-cache-miss: true
            key: >-
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
                needs.info.outputs.pre-commit_cache_key }}
        - name: Run ruff-format
          run: |
            . venv/bin/activate
            pre-commit run --hook-stage manual ruff-format --all-files --show-diff-on-failure
          env:
            RUFF_OUTPUT_FORMAT: github
    lint-ruff:
      name: Check ruff
      runs-on: ubuntu-24.04
      needs:
        - pre-commit
      steps:
        - name: Check out code from GitHub
          uses: actions/checkout@v4.2.2
        - name: Set up Python ${{ env.DEFAULT_PYTHON }}
          uses: actions/setup-python@v5.3.0
          id: python
          with:
            python-version: ${{ env.DEFAULT_PYTHON }}
            check-latest: true
        - name: Restore base Python virtual environment
          id: cache-venv
          uses: actions/cache/restore@v4.2.0
          with:
            path: venv
            fail-on-cache-miss: true
            key: >-
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{
                needs.info.outputs.pre-commit_cache_key }}
        - name: Restore pre-commit environment from cache
          id: cache-precommit
          uses: actions/cache/restore@v4.2.0
          with:
            path: ${{ env.PRE_COMMIT_CACHE }}
            fail-on-cache-miss: true
            key: >-
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
                needs.info.outputs.pre-commit_cache_key }}
        - name: Run ruff
          run: |
            . venv/bin/activate
            pre-commit run --hook-stage manual ruff --all-files --show-diff-on-failure
          env:
            RUFF_OUTPUT_FORMAT: github
    mypy:
      name: Check mypy
      runs-on: ubuntu-24.04
      needs:
        - pre-commit
      steps:
        - name: Check out code from GitHub
          uses: actions/checkout@v4.2.2
        - name: Set up Python ${{ env.DEFAULT_PYTHON }}
          uses: actions/setup-python@v5.3.0
          id: python
          with:
            python-version: ${{ env.DEFAULT_PYTHON }}
            check-latest: true
#         - name: Generate partial mypy restore key
#           id: generate-mypy-key
#           run: |
#             mypy_version=$(cat requirements_test.txt | grep mypy | cut -d '=' -f 3)
#             echo "version=1" >> $GITHUB_OUTPUT
#             echo "key=mypy-${{ env.MYPY_CACHE_VERSION }}-$(date -u '+%Y-%m-%dT%H:%M:%s')" >> $GITHUB_OUTPUT
        - name: Restore base Python virtual environment
          id: cache-venv
          uses: actions/cache/restore@v4.2.0
          with:
            path: venv
            fail-on-cache-miss: true
            key: >-
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{
                needs.info.outputs.pre-commit_cache_key }}
        - name: Restore mypy cache
          uses: actions/cache@v4.2.0
          with:
            path: .mypy_cache
            key: >-
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
              steps.generate-mypy-key.outputs.key }}
            restore-keys: |
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-mypy-${{
              env.MYPY_CACHE_VERSION }}-${{ steps.generate-mypy-key.outputs.version }}
        - name: Restore pre-commit environment from cache
          id: cache-precommit
          uses: actions/cache/restore@v4.2.0
          with:
            path: ${{ env.PRE_COMMIT_CACHE }}
            fail-on-cache-miss: true
            key: >-
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
                needs.info.outputs.pre-commit_cache_key }}
        - name: Run Mypy
          run: |
            . venv/bin/activate
            pre-commit run --hook-stage manual mypy --all-files


    lint-other:
      name: Check other linters
      runs-on: ubuntu-24.04
      needs:
        - pre-commit
      steps:
        - name: Check out code from GitHub
          uses: actions/checkout@v4.2.2
        - name: Set up Python ${{ env.DEFAULT_PYTHON }}
          uses: actions/setup-python@v5.3.0
          id: python
          with:
            python-version: ${{ env.DEFAULT_PYTHON }}
            check-latest: true
        - name: Restore base Python virtual environment
          id: cache-venv
          uses: actions/cache/restore@v4.2.0
          with:
            path: venv
            fail-on-cache-miss: true
            key: >-
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{
                needs.info.outputs.pre-commit_cache_key }}
        - name: Restore pre-commit environment from cache
          id: cache-precommit
          uses: actions/cache/restore@v4.2.0
          with:
            path: ${{ env.PRE_COMMIT_CACHE }}
            fail-on-cache-miss: true
            key: >-
              ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
                needs.info.outputs.pre-commit_cache_key }}

        - name: Run check-json
          run: |
            . venv/bin/activate
            pre-commit run --hook-stage manual check-json --all-files

        - name: Run codespell
          run: |
            . venv/bin/activate
            pre-commit run --show-diff-on-failure --hook-stage manual codespell --all-files


    base:
        name: Prepare dependencies
        runs-on: ubuntu-24.04
        timeout-minutes: 60
        strategy:
          matrix:
            python-version: [3.12, 3.13]
        steps:
          - name: Check out code from GitHub
            uses: actions/checkout@v4.2.2
          - name: Set up Python ${{ matrix.python-version }}
            id: python
            uses: actions/setup-python@v5.3.0
            with:
              python-version: ${{ matrix.python-version }}
              check-latest: true
          - name: Generate partial uv restore key
            id: generate-uv-key
            run: |
              uv_version=$(cat requirements.txt | grep uv | cut -d '=' -f 3)
              echo "version=${uv_version}" >> $GITHUB_OUTPUT
              echo "key=uv-${{ env.UV_CACHE_VERSION }}-${uv_version}-${{
                env.HA_SHORT_VERSION }}-$(date -u '+%Y-%m-%dT%H:%M:%s')" >> $GITHUB_OUTPUT
          - name: Restore base Python virtual environment
            id: cache-venv
            uses: actions/cache@v4.2.0
            with:
              path: venv
              key: >-
                ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
                needs.info.outputs.python_cache_key }}
          - name: Restore uv wheel cache
            if: steps.cache-venv.outputs.cache-hit != 'true'
            uses: actions/cache@v4.2.0
            with:
              path: ${{ env.UV_CACHE_DIR }}
              key: >-
                ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
                steps.generate-uv-key.outputs.key }}
              restore-keys: |
                ${{ runner.os }}-${{ steps.python.outputs.python-version }}-uv-${{
                env.UV_CACHE_VERSION }}-${{ steps.generate-uv-key.outputs.version }}
          - name: Create Python virtual environment
            if: steps.cache-venv.outputs.cache-hit != 'true'
            run: |
              python -m venv venv
              . venv/bin/activate
              python --version
              pip install uv
              uv pip install -U "pip>=21.3.1" setuptools wheel
              uv pip install -r requirements.txt
              uv pip install -r requirements-dev.txt
              uv pip install -e . --config-settings editable_mode=compat

#     mypy:
#       name: Check mypy
#       runs-on: ubuntu-24.04
#       needs:
#         - base
#       steps:
#         - name: Check out code from GitHub
#           uses: actions/checkout@v4.2.2
#         - name: Set up Python ${{ env.DEFAULT_PYTHON }}
#           id: python
#           uses: actions/setup-python@v5.3.0
#           with:
#             python-version: ${{ env.DEFAULT_PYTHON }}
#             check-latest: true
#         - name: Generate partial mypy restore key
#           id: generate-mypy-key
#           run: |
#             mypy_version=$(cat requirements_test.txt | grep mypy | cut -d '=' -f 3)
#             echo "version=$mypy_version" >> $GITHUB_OUTPUT
#             echo "key=mypy-${{ env.MYPY_CACHE_VERSION }}-$mypy_version-${{
#               env.HA_SHORT_VERSION }}-$(date -u '+%Y-%m-%dT%H:%M:%s')" >> $GITHUB_OUTPUT
#         - name: Restore full Python ${{ env.DEFAULT_PYTHON }} virtual environment
#           id: cache-venv
#           uses: actions/cache/restore@v4.2.0
#           with:
#             path: venv
#             fail-on-cache-miss: true
#             key: >-
#               ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
#               needs.info.outputs.python_cache_key }}
#         - name: Restore mypy cache
#           uses: actions/cache@v4.2.0
#           with:
#             path: .mypy_cache
#             key: >-
#               ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
#               steps.generate-mypy-key.outputs.key }}
#             restore-keys: |
#               ${{ runner.os }}-${{ steps.python.outputs.python-version }}-mypy-${{
#               env.MYPY_CACHE_VERSION }}-${{ steps.generate-mypy-key.outputs.version }}-${{
#               env.HA_SHORT_VERSION }}-
#         - name: Register mypy problem matcher
#           run: |
#             echo "::add-matcher::.github/workflows/matchers/mypy.json"
#         - name: Run mypy (fully)
#           if: needs.info.outputs.test_full_suite == 'true'
#           run: |
#             . venv/bin/activate
#             python --version
#             mypy homeassistant pylint
#         - name: Run mypy (partially)
#           if: needs.info.outputs.test_full_suite == 'false'
#           shell: bash
#           run: |
#             . venv/bin/activate
#             python --version
#             mypy homeassistant/components/${{ needs.info.outputs.integrations_glob }}
#
#     prepare-pytest-full:
#       runs-on: ubuntu-24.04
#       if: |
#         (github.event_name != 'push' || github.event.repository.full_name == 'home-assistant/core')
#         && github.event.inputs.lint-only != 'true'
#         && github.event.inputs.pylint-only != 'true'
#         && github.event.inputs.mypy-only != 'true'
#         && github.event.inputs.audit-licenses-only != 'true'
#         && needs.info.outputs.test_full_suite == 'true'
#       needs:
#         - info
#         - base
#         - gen-requirements-all
#         - hassfest
#         - lint-other
#         - lint-ruff
#         - lint-ruff-format
#         - mypy
#       name: Split tests for full run
#       steps:
#         - name: Install additional OS dependencies
#           run: |
#             sudo rm /etc/apt/sources.list.d/microsoft-prod.list
#             sudo apt-get update
#             sudo apt-get -y install \
#               bluez \
#               ffmpeg \
#               libturbojpeg \
#               libgammu-dev
#         - name: Check out code from GitHub
#           uses: actions/checkout@v4.2.2
#         - name: Set up Python ${{ env.DEFAULT_PYTHON }}
#           id: python
#           uses: actions/setup-python@v5.3.0
#           with:
#             python-version: ${{ env.DEFAULT_PYTHON }}
#             check-latest: true
#         - name: Restore base Python virtual environment
#           id: cache-venv
#           uses: actions/cache/restore@v4.2.0
#           with:
#             path: venv
#             fail-on-cache-miss: true
#             key: >-
#               ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
#               needs.info.outputs.python_cache_key }}
#         - name: Run split_tests.py
#           run: |
#             . venv/bin/activate
#             python -m script.split_tests ${{ needs.info.outputs.test_group_count }} tests
#         - name: Upload pytest_buckets
#           uses: actions/upload-artifact@v4.4.3
#           with:
#             name: pytest_buckets
#             path: pytest_buckets.txt
#             overwrite: true
#
    pytest-full:
      runs-on: ubuntu-24.04
      needs:
        - base
        - lint-other
        - lint-ruff
        - lint-ruff-format
        - mypy
      strategy:
        fail-fast: false
        matrix:
          python-version: [3.12, 3.13]
      name: >-
        Run tests Python ${{ matrix.python-version }} (${{ matrix.group }})
      steps:
        - name: Check out code from GitHub
          uses: actions/checkout@v4.2.2
        - name: Set up Python ${{ matrix.python-version }}
          id: python
          uses: actions/setup-python@v5.3.0
          with:
            python-version: ${{ matrix.python-version }}
            check-latest: true
        - name: Restore full Python ${{ matrix.python-version }} virtual environment
          id: cache-venv
          uses: actions/cache/restore@v4.2.0
          with:
            path: venv
            fail-on-cache-miss: true
            key: ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
              needs.info.outputs.python_cache_key }}
        - name: Run pytest
          timeout-minutes: 60
          id: pytest-full
          env:
            PYTHONDONTWRITEBYTECODE: 1
          run: |
            . venv/bin/activate
            python --version
            python -m coverage run -m pytest --junitxml=pytest-results.xml
            coverage xml -o coverage.xml
            python -m coverage report --fail-under=100
        - name: Upload pytest output
          if: success() || failure() && steps.pytest-full.conclusion == 'failure'
          uses: actions/upload-artifact@v4.4.3
          with:
            name: pytest-${{ github.run_number }}-${{ matrix.python-version }}
            path: pytest-*.txt
            overwrite: true
        - name: Upload coverage artifact
          if: needs.info.outputs.skip_coverage != 'true'
          uses: actions/upload-artifact@v4.4.3
          with:
            name: coverage-${{ matrix.python-version }}
            path: coverage.xml
            overwrite: true
#         - name: Remove pytest_buckets
#           run: rm pytest_buckets.txt
#         - name: Check dirty
#           run: |
#             ./script/check_dirty
#
#
#     coverage-full:
#       name: Upload test coverage to Codecov (full suite)
#       runs-on: ubuntu-24.04
#       needs:
#         - pytest-full
#       timeout-minutes: 10
#       steps:
#         - name: Check out code from GitHub
#           uses: actions/checkout@v4.2.2
#         - name: Download all coverage artifacts
#           uses: actions/download-artifact@v4.1.8
#           with:
#             pattern: coverage-*
#         - name: Upload coverage to Codecov
#           if: needs.info.outputs.test_full_suite == 'true'
#           uses: codecov/codecov-action@v5.1.1
#           with:
#             fail_ci_if_error: true
#             flags: full-suite
#             token: ${{ secrets.CODECOV_TOKEN }}
#
#     pytest-partial:
#       runs-on: ubuntu-24.04
#       if: |
#         (github.event_name != 'push' || github.event.repository.full_name == 'home-assistant/core')
#         && github.event.inputs.lint-only != 'true'
#         && github.event.inputs.pylint-only != 'true'
#         && github.event.inputs.mypy-only != 'true'
#         && github.event.inputs.audit-licenses-only != 'true'
#         && needs.info.outputs.tests_glob
#         && needs.info.outputs.test_full_suite == 'false'
#       needs:
#         - info
#         - base
#         - gen-requirements-all
#         - hassfest
#         - lint-other
#         - lint-ruff
#         - lint-ruff-format
#         - mypy
#       strategy:
#         fail-fast: false
#         matrix:
#           group: ${{ fromJson(needs.info.outputs.test_groups) }}
#           python-version: ${{ fromJson(needs.info.outputs.python_versions) }}
#       name: >-
#         Run tests Python ${{ matrix.python-version }} (${{ matrix.group }})
#       steps:
#         - name: Install additional OS dependencies
#           run: |
#             sudo rm /etc/apt/sources.list.d/microsoft-prod.list
#             sudo apt-get update
#             sudo apt-get -y install \
#               bluez \
#               ffmpeg \
#               libturbojpeg \
#               libgammu-dev
#         - name: Check out code from GitHub
#           uses: actions/checkout@v4.2.2
#         - name: Set up Python ${{ matrix.python-version }}
#           id: python
#           uses: actions/setup-python@v5.3.0
#           with:
#             python-version: ${{ matrix.python-version }}
#             check-latest: true
#         - name: Restore full Python ${{ matrix.python-version }} virtual environment
#           id: cache-venv
#           uses: actions/cache/restore@v4.2.0
#           with:
#             path: venv
#             fail-on-cache-miss: true
#             key: ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
#               needs.info.outputs.python_cache_key }}
#         - name: Register Python problem matcher
#           run: |
#             echo "::add-matcher::.github/workflows/matchers/python.json"
#         - name: Register pytest slow test problem matcher
#           run: |
#             echo "::add-matcher::.github/workflows/matchers/pytest-slow.json"
#         - name: Compile English translations
#           run: |
#             . venv/bin/activate
#             python3 -m script.translations develop --all
#         - name: Run pytest
#           timeout-minutes: 10
#           id: pytest-partial
#           shell: bash
#           env:
#             PYTHONDONTWRITEBYTECODE: 1
#           run: |
#             . venv/bin/activate
#             python --version
#             set -o pipefail
#
#             if [[ ! -f "tests/components/${{ matrix.group }}/__init__.py" ]]; then
#               echo "::error:: missing file tests/components/${{ matrix.group }}/__init__.py"
#               exit 1
#             fi
#
#             cov_params=()
#             if [[ "${{ needs.info.outputs.skip_coverage }}" != "true" ]]; then
#               cov_params+=(--cov="homeassistant.components.${{ matrix.group }}")
#               cov_params+=(--cov-report=xml)
#               cov_params+=(--cov-report=term-missing)
#             fi
#
#             python3 -b -X dev -m pytest \
#               -qq \
#               --timeout=9 \
#               --numprocesses auto \
#               --snapshot-details \
#               ${cov_params[@]} \
#               -o console_output_style=count \
#               --durations=0 \
#               --durations-min=1 \
#               -p no:sugar \
#               tests/components/${{ matrix.group }} \
#                 2>&1 | tee pytest-${{ matrix.python-version }}-${{ matrix.group }}.txt
#         - name: Upload pytest output
#           if: success() || failure() && steps.pytest-partial.conclusion == 'failure'
#           uses: actions/upload-artifact@v4.4.3
#           with:
#             name: pytest-${{ github.run_number }}-${{ matrix.python-version }}-${{ matrix.group }}
#             path: pytest-*.txt
#             overwrite: true
#         - name: Upload coverage artifact
#           if: needs.info.outputs.skip_coverage != 'true'
#           uses: actions/upload-artifact@v4.4.3
#           with:
#             name: coverage-${{ matrix.python-version }}-${{ matrix.group }}
#             path: coverage.xml
#             overwrite: true
#         - name: Check dirty
#           run: |
#             ./script/check_dirty
#
#     coverage-partial:
#       name: Upload test coverage to Codecov (partial suite)
#       if: needs.info.outputs.skip_coverage != 'true'
#       runs-on: ubuntu-24.04
#       needs:
#         - info
#         - pytest-partial
#       timeout-minutes: 10
#       steps:
#         - name: Check out code from GitHub
#           uses: actions/checkout@v4.2.2
#         - name: Download all coverage artifacts
#           uses: actions/download-artifact@v4.1.8
#           with:
#             pattern: coverage-*
#         - name: Upload coverage to Codecov
#           if: needs.info.outputs.test_full_suite == 'false'
#           uses: codecov/codecov-action@v5.1.1
#           with:
#             fail_ci_if_error: true
#             token: ${{ secrets.CODECOV_TOKEN }}
